<?xml version="1.0" encoding="UTF-8"?>
<!--
*****************************************************************
                   Vol 3 - A N N E X - C
*****************************************************************  
-->

<!DOCTYPE appendix PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"../schema/dtd/docbkx45/docbookx.dtd" [
<!ENTITY nisp-web-mainpage "http://nisp.nc3a.nato.int/">
]>
<appendix id="v3-c">
    <title>Tactical ESB (Tact ESB) Profile</title>

  <sect1>
    <title>Introduction</title>

    <para>The aim of this chapter is to describe a profile for a tactical Enterprise 
    Service Bus (tact ESB) to be used in a coalition, highly mobile and distributed 
    environment. The profile focuses specifically on requirements from military 
    usage and goes beyond the ESB specification, available in civil 
    implementations/products.</para>

    <para>The profile is a generic specification; following the principle construction 
    elements, it allows for na-tional implementations a derivation from the proposed 
    one, not losing the interoperability aspects.</para>

    <sect2>
      <title>General Context</title>
      
      <para>Within NATO, interoperability is defined as, the ability to act together 
      coherently, effectively and efficiently to achieve Allied tactical, operational 
      and strategic objectives. In the context of the information exchange, interoperability
      means that a system, unit or forces of any service, nation can transmit data 
      to and receive data from any other system, unit or forces of any service or 
      nation, and use the exchanged data to operate effectively together. This tactical
      ESB Interoperability Profile places the required tactical interoperability 
      requirements, standards and specifications, to include the related reference
      architecture elements, in context for those nations/organizations providing 
      for or participating in the tactical capability development. Use of this
      interoperability profile aims to help NATO, the Nations and non-NATO actors
      achieve cost-effective solutions to common tactical requirements by leveraging 
      significant tactical investments across the tactical community of interest.
      </para>
      
      <para>This profile uses the terms “Service Interoperability Profile (SIP)” 
      and “Service Interoperability Point (SIOP)” as defined in EAPC
      (AC/322)D(2006)0002-REV1.</para>
    </sect2>
    
    <sect2>
      <title>Aim</title>
      
      <para>The aim of the tact ESB Interoperability Profile is to facilitate increased
      tactical interoperability through enhanced federated sharing of tactical data
      and information.</para>
    </sect2>
    
    <sect2>
      <title>Relevance</title>
      
      <para>The need for a profile is driven by the complexity of a federated battlefield. 
      There are an ever-growing number of interrelated specifications, standards, 
      and systems all at different stages of development and adoption, and often with 
      conflicting requirements. The profile provides a ge-neric ESB specification 
      which allows different nations/organizations in a federated environment to 
      exchange data/information under harmonized security policies across national/organizational 
      boundaries and to provide and use services to/from partners.</para>
    </sect2>
    
    <sect2>
      <title>Assumptions</title>
      
      <para>The following ten assumptions were made as part of the overall context 
      for developing this pro-file:
        <orderedlist inheritnum="ignore" continuation="restarts">
          <listitem><para>The tact ESB Interoperability includes the ability to share 
            information throughout the entire federated battlefield consistent with 
            stakeholder information needs and stakeholder willingness to share 
            information.</para></listitem>
          <listitem><para>Tact ESB enables the NATO Network Enabled Capability (NNEC); 
            the primary enabler of Information Superiority is NNEC in an tactical 
            environment.</para></listitem>
          <listitem><para>The tact ESB capabilities are developed along the lines 
            of a service-oriented architecture (SOA) approach within a federated 
            environment.</para></listitem>
          <listitem><para>Tact ESB in support of NATO operations will be developed
            in conformity with the relevant international norms and international 
            law.</para></listitem>
          <listitem><para>Promotion of an agreed set of common standards will be 
            required in many areas for the effective and efficient transfer of the 
            tact ESB data and information from and to participating nations and 
            organizations.</para></listitem>
          <listitem><para>A key principle for tact ESB interoperability and its 
            underlying broad information sharing is Information Assurance. Information 
            shall be managed with an emphasis on the “responsibility-to-share” 
            balanced with security requirements.</para></listitem>
          <listitem><para>Current assets (standards, frameworks, documents, systems, 
            and services) will be used to the largest extent possible.</para></listitem>
        </orderedlist>
      </para>
    </sect2>
  </sect1>
  
  <sect1>
    <title>Profile Elements</title>
    
    <para>This section is the heart of the profile, and provides the required tact
    ESB interoperability require-ments, standards and specifications in context for
    those nations/organizations providing for or par-ticipating in the tactical
    capability development.</para>
    
    <para>This section is subdivided into 4 parts as follows:
      <itemizedlist>
        <listitem><para>High Level Capability Aims</para></listitem>
        <listitem><para>High Level Concept</para></listitem>
        <listitem><para>Related Standards and Profiles</para></listitem>
        <listitem><para>Emerging Services Framework</para></listitem>
        <listitem><para>System Descriptions</para></listitem>
      </itemizedlist>
    </para>
    
    <sect2>
      <title>High Level Capability Aims</title>
      
      <para>Based on commonly agreed scenarios in NATO like Joint Fire Support or 
      Convoy Protection, the following capability requirements for services and 
      service-infrastructure that are necessary for their operation are identified:
        <itemizedlist>
          <listitem><para>Provision of services on the tactical level, that are 
            characterized by mobility and radio communication;</para></listitem>
          <listitem><para>Provision of services for joint use;</para></listitem>
          <listitem><para>Provision of services to rear units / systems (e. g. to 
            information systems in the homeland);</para>
            <para>Command and control (C2) as well as the use of armed forces are 
            based on a joint, interoperable information and communication network 
            across command levels that links all relevant persons, agencies, units 
            and institutions as well as sensors and effectors with each other to 
            ensure a seamless, reliable and timely information sharing shaped to
            the needs and command levels in almost real-time.</para>
            <para>Basis for command and control and the use of armed forces are
            interoperable information and communication systems used for the provision 
            of the tactical situational picture (situation information). Out of
            this tactical information space services on the tactical and operational
            level shall provide selected data to the user based on his needs.</para>
            <para>By NNEC capable armed forces, for example are better enabled to
              <itemizedlist>
                <listitem><para>obtain a actual joint situational picture;</para></listitem>
                <listitem><para>accelerate the C2-process;</para></listitem>
                <listitem><para>concentrate effects and by this achieve effect
                  superiority;</para></listitem>
                <listitem><para>minimize losses and to execute operations successfully 
                  and more precise, more flexible and with less forces.</para></listitem>
              </itemizedlist>
            </para>
            <para>For that reason they use a joint situational picture.</para>
          </listitem>
          <listitem><para>Interoperability: Services are used in an alliance.</para>
            <para>Interoperability is the capability of IT-Systems, equipment and
            procedures to cooperate or the capability of information exchange between 
            information systems through adaptation, e.g. by use of standardized 
            interfaces and data formats. It includes systems, equipment as well as 
            organization, training and operational procedures.</para>
            <para>To conduct operations efficiently in a multinational environment, 
            the capability for NCM (i.e. the ability to provide and accept services 
            in the international environment) is required. Generally, in Germany
            all armed operations of the Bundeswehr are executed exclusively multinational
            within the framework of NATO/EU or UN.</para>
            <para>Therefore Interoperability is defined as follows:
              <itemizedlist>
                <listitem><para>The existence of operational procedures, operating
                  sequences and uniform stan-dards for Man-Machine-Interfaces (MMI) 
                  is called operational interoperability;</para></listitem>
                <listitem><para>Procedural interoperability is ensured if uniform 
                  protocols for information exchange between platforms are used 
                  and a uniform definition for that data exists in the soft-ware.
                  </para></listitem>
              </itemizedlist>
            </para>
          </listitem>
        </itemizedlist>
      </para>
      
      <para>Technical interoperability is ensured if uniform technical parameters/interfaces
      for information transfer are used.
        <itemizedlist>
          <listitem><para>Caused by current changes during operations, a flexible 
            service management (SOA-Management) is required.</para>
            <para>Efficient application of services depends on an efficient C2-structure, 
            which is able to react fast and decisive on changes of the environmental 
            conditions of operations. Planning and operations of the services and 
            of the service-infrastructure must be tuned to the operational planning 
            and execution and have to be adaptable in an efficient manner.</para>
          </listitem>
          <listitem><para>Real-time provision of information</para>
            <para>Basically only such real-time, operations related information has
            to be provided which is es-sential for the conduct of that operation. 
            Information exchange for command and control, including information for 
            weapon system platform coordination and planning, elements of the „Battle
            Management Command, Control, Communications, Computers and Intelligence“
            (BMC4I) and mission support elements is time critical and has to match
            as well with the operations area and the operations method as with the 
            needs of the user.</para>
            <para>Basically, time critical data that influence current operations 
            encompass, but are not limited to:
              <itemizedlist>
                <listitem><para>Data on air-, ground- and maritime situation (including 
                  lower space), integrated air defense (IAD) and subsurface situation;
                  </para></listitem>
                <listitem><para>Data on electronic warfare;</para></listitem>
                <listitem><para>Command and Control decision including weapons employment
                  (C2);</para></listitem>
                <listitem><para>Status reports of own and neighboring forces.</para></listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem><para>Platform- (System-) requirements on autarchy and redundancy
            </para>
            <para>Dictated by the operations method on the tactical and operational 
            level, the possible non-availability of communication-connections and 
            requirements on the capability to operate (resistance to failure), platforms 
            and systems selected for operations need high redundancy and resistance 
            to failure.</para>
            <para>Caused by the possible non-availability of communication-connections 
            these platforms and systems must be autarkic, i.e. the use and the provision 
            of services, respectively, must be ensured even if there is no connection 
            to the own rear area.</para>
            <para>Summarizing it is the most demanding challenge for the reference 
            environment services (SRE) related to the provision of services and of 
            the service-infrastructure is the realization of:
              <itemizedlist>
                <listitem><para>the transfer of information,</para></listitem>
                <listitem><para>the management of information,</para></listitem>
                <listitem><para>the processing of information,</para></listitem>
                <listitem><para>the security of information systems (IT-security),
                  </para></listitem>
              </itemizedlist>
            </para>
            <para>on the tactical and operational level taking into account mobility, 
            limited radio broadcast capacity, multinational use of services, near-real-time 
            requirements as well as autarchy and redundancy of the service-infrastructure 
            on the platforms and systems.</para>
          </listitem>
        </itemizedlist>
      </para>
    </sect2>
    
    <sect2>
      <title>High Level Concept</title>
      
      <para>The concept for a service-oriented architecture is based on the employment 
      of services. The following figure points out the interrelations of the components
      of a SOA.</para>
     
      <figure id="f1-soacomponents" float="0">
        <title>Components of a SOA</title>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="../figures/soacomponents.svg" format="SVG" />
          </imageobject>
        </mediaobject>
      </figure>
      
      <para>The application frontend (MMI) and Consumer for interaction between the 
      user and a service and for the presentation of messages addressed to the user.
      </para>
      
      <para>The main element of an SOA is the service as standardized implementation 
      of certain functionality. A service is a self-describing open component that 
      enables a fast and economical combination of dis-tributed applications.</para>
      
      <figure id="f1-servicecomponents" float="0">
        <title>Components of a Service</title>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="../figures/servicecomponents.svg" format="SVG" />
          </imageobject>
        </mediaobject>
      </figure>
          
      <para>A service is made available by a provider und used by a consumer. The 
      above figure shows the components of a service.</para>
      
      <para>In order to make a service available as a SOA-service it has to fulfill
      certain conditions. It must be callable, show a defined functionality und stick
      to defined conditions. As a minimum, each service consists of three components: 
      the interface, the “service contract” and the service implementation:
        <itemizedlist>
          <listitem><para>Service: The service itself must have a name or, if it shall
            be generally accessible, even a unique name.</para></listitem>
          <listitem><para>Service Interface(s): Interfaces of the service that constitute 
            the access point (one and the same service may have different interfaces).
            </para></listitem>
          <listitem><para>Service Contract: The Service Contract is an informal specification 
            of the responsibilities, the functionalities, the conditions and limitations
            and of the usage of the service.</para></listitem>
          <listitem><para>Service Implementation: Is the technical realization of a 
            service. Its main components are the reflection of the business-logic and 
            the persistent storage of eventually necessary data.</para></listitem>
        </itemizedlist>
      </para>
      
      <para>A Service-Level-Agreement (SLA) or Quality-of-Service-Agreement (QSA) 
      denotes a contract or interface, respectively between a consumer (customer) 
      and a provider for recurring services.</para>
      
      <para>The aim is to provide transparency on control options for the consumer 
      and the provider by describing exactly assured performance characteristics 
      like amount of effort, reaction time, and speed of processing. Its main part 
      is the description of the quality of the service (service level) that has been
      agreed.</para>
      
      <para>The Service-Registry / -Repository ensures that services are being found
      and executed and be deposited them through a service-bus.</para>
      
      <para>If, for example a function is initiated on the application frontend that
      requires a service, the service-bus performs the necessary steps for connection. 
      For that purpose the service-bus accesses the service-registry / repository and 
      connects the right service (provider) with the right service client (consumer).
      </para>
      
      <para>In summary, the function of a service-bus encompasses transmission, data
      transformation and routing of a message.</para>
      
      <para>Beside its main task – to enable communication amongst the SOA-participants
      – the service-bus is also responsible for the technical service. This comprises 
      logging, security, message transformation and the administration of transactions.
      </para>
      
      <para><emphasis role="bold">Differentiation to the Software Bus of the Enterprise 
      Application Integration (EAI)</emphasis></para>
      
      <para>The concept of the service-bus guarantees a main advantage for the SOA-model
      against the classic EAI (Enterprise Application Integration). The EAI-approach
      uses a software bus, in order to connect two applications with the same technology
      whilst the service bus of a SOA offers a lot more flexibility because of its
      technological independence and the orientation of the services. The service 
      bus supplements the EAI concept and so eliminates its weak points. These weak 
      points are particularly its dependence on proprietary APIs, its uneven development
      behavior and manufacturer-dependant message formats.</para>
      
      <para>Here the fundamental difference between a SOA and EAI becomes obvious.
      An EAI is focused on the coupling of autonomous applications in order to achieve 
      useful possibilities for data processing of the overall application. In a SOA 
      services are coupled only loosely and existing systems shall remain untouched whenever possible. Specifically, in a SOA the services are in focus, not 
      the application systems.</para>
      
      <para>Another advantage of SOA vs. EAI is the scalability of the service-bus.
      The EAI-concept is based on the "Hub-and-Spoke Method", where the software bus
      as a central point of contact connects the involved enterprise applications.
      </para>
    
      <para><emphasis role="bold">Definition of the SOA-(ESB-) Infrastructure and 
      of the Enterprise Service Bus (ESB):</emphasis></para>
      
      <para>Unfortunately there is no universally applicable grouping of services,
      because the business processes of the companies / organizations are very different.
      </para>
      
      <para>To achieve comparability, different definitions and groupings of services
      are considered and a corresponding mapping is made. For that purpose the following
      definition of a SOA- (ESB)-infrastructure is used:
        <itemizedlist>
          <listitem><para><emphasis role="bold">SOA-(ESB-) Infrastructure:</emphasis></para>
            <para>A SOA-(ESB-) infrastructure provides core- and general services for
              operation and use of application services and applications.</para>
            <para>The core of a SOA-(ESB-) infrastructure is formed by the service-registry
              / repository, through which application services and applications are 
              provided with service descriptions and policies. Additionally the SOA-
              (ESB-) infrastructure comprises technical services for logging, security,
              message formatting and for administration of transactions.</para></listitem>
          <listitem><para><emphasis role="bold">Enterprise Service Bus (ESB):</emphasis></para>
            <para>The Enterprise Service Bus combines the service bus with its functions
              message transfer, date transformation and routing of the message with
              the SOA-(ESB-) infrastructure and amongst consumers (clients) und providers
              (service). So the ESB provides something like a service middleware to 
              the consumers (clients) and providers (service) in order to use higher-value
              (application-) services.</para>
          </listitem>
        </itemizedlist>
      </para>
    </sect2>
    
    <sect2>
      <title>Basic Model of a Service Reference Environment</title>
      
      <para>A basic principle of SOA – Service Oriented Architecture – is a loose 
      coupling of (web) services of operational systems, of different development 
      languages and other technologies with underlaid applications. SOA separates
      functions in different services which can be accessed, combined and reused 
      via a network.</para>
      
      <para>The use of an Enterprise Service Bus (ESB), also named Enterprise Integration 
      Bus, as a central component is meaningful for the connection of services for 
      more complex, SOA-based solutions. Typically an ESB consists of a set of instruments 
      for reliable and assured message-transfer, routing-mechanisms for message-distribution,
      pre-designed adaptors for the integration of different systems, management- and 
      supervision-tools and other components.</para>
      
      <para>The following figure depicts a general consumer-/ provider structure in
      a SOA environment. This figure is the basis for the considerations to follow 
      and, despite its simplicity, it contains some important statements.</para>
      
      <figure id="f1-general-p-c-structure" float="0">
        <title>General Provider / Consumer Structure in an ESB environment</title>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="../figures/general-p-c-structure.svg" format="SVG" />
          </imageobject>
        </mediaobject>
      </figure>
    
      <para>Generally a SOA configuration – and thus the reference environment SRE –
      consists of four main components:
        <itemizedlist>
          <listitem><para><emphasis role="bold">Provider:</emphasis>A provider makes
            a service available to one or more consumers.</para></listitem>
          <listitem><para><emphasis role="bold">Consumer:</emphasis>A consumer is
            an application that uses a service of a provider. In turn, a consumer 
            again may provide a service to other consumers.</para></listitem>
          <listitem><para><emphasis role="bold">Enterprise Service Bus (ESB):</emphasis>
            An ESB forms a kind of middleware that mediates between a service provider
            and one or more users (consumers). As a minimum the ESB routing, messaging,
            transformation, mapping and supervision etc.</para></listitem>
          <listitem><para><emphasis role="bold">SOA-(ESB-) Infrastructure:</emphasis>
            The SOA-(ESB-) Infrastructure-components is part of the ESB, by which 
            basic services like e.g. directory- or security-services are provided.
            </para></listitem>
        </itemizedlist>
      </para>
      
      <para>In this generic, manufacturer-independent model the Enterprise Service
      Bus (ESB) iaw a virtual bus, that consists of only one component – ESB-Stub – ,
      through which any further component (e.g. provider, consumer) is connected
      with the virtual bus. Depending on the type of component, either the provider,
      through the ESB-stub, provides a service-endpoint or a consumer uses a service
      of a provider trough the ESB-stub, respectively. The communication between
      consumer and provider is effected through the ESB-stub exclusively, though
      not via a central unit but directly. In the ESB-context, the infrastructure,
      like a provider, provides further services, which contain the ESB-stub as well.
      </para>
      
      <para>Because further services are needed for the use of a service e.g. to 
      obtain the service-description or for security and as these services are needed
      for every single use of a service, the ESB-stub executes these basic services
      automatically. For that reason the infrastructure in many cases is also being
      referred to as „SOA-(ESB-) Infrastructure“.</para>
      
      <para>The following SRE capabilities can be derived from that:
        <orderedlist inheritnum="ignore" continuation="restarts">
          <listitem><para>A SRE configuration (operational system) consists of four
            main components: consumer, provider, SOA-(ESB-) Infrastructure and a 
            virtual, distributed ESB.</para></listitem>
          <listitem><para>A SRE configuration (operational) provides direct communication-relations
            between consumer and provider (without central components).</para></listitem>
          <listitem><para>A reference environment for services (SRE) is based on 
            different classifications of the providers (classes of services).</para></listitem>
          <listitem><para>The service consumers and providers are using the SOA-(ESB-)
            Infrastructure for further services through an ESB (ESB-stub).</para></listitem>
          <listitem><para>The SOA-(ESB-) Infrastructure-services form provider/service 
            classes analogous to the classes of application-services.</para></listitem>
          <listitem><para>The Enterprise Service Bus (ESB-Stub) takes over recurring
            routines of the application e.g. usage of the SOA-(ESB-) Infrastructure.
            </para></listitem>
        </orderedlist>
      </para>
      
      <para>A substantial capability of a SOA Enterprise Service Bus is the standardized 
      provision of services, i.e. the standardized access on providers and the provision
      of data, respectively. For that purpose the ESB, through its framework, provides
      to the consumers open, standardized service-endpoints of providers.</para>
      
      <para>The following figure shows the structure of an open service-endpoint.
      Here the provider-application is connected to the (virtual, distributed) ESB
      through the ESB-stub (service container).</para>
      
      <para>The ESB-stub contains a framework which is able to do e.g. routing, 
      messaging, transformation, mapping, supervision-functions etc. The service-endpoint-interface 
      encompasses the WSDL-description of the service. Through the ESB service endpoint 
      the service is provided to the consumer’s iaw the WSDL-service-description.
      </para>
      
      <figure id="f1-esbstructure" float="0">
        <title>Structure of an ESB Service Endpoint</title>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="../figures/esbstructure.svg" format="SVG" />
          </imageobject>
        </mediaobject>
      </figure>
      
      <para>Standardized access to a service or the provision of data of a service, 
      respectively, is realized through open Service Endpoint Standards like for 
      example:
        <itemizedlist>
          <listitem><para>HTTP / HTTPS;</para></listitem>
          <listitem><para>JMS;</para></listitem>
          <listitem><para>SOAP / HTTP(s);</para></listitem>
          <listitem><para>FTP (File Transfer Protocol);</para></listitem>
          <listitem><para>Email (SMTP);</para></listitem>
          <listitem><para>WS-Reliability / WS-Reliable Messaging;</para></listitem>
          <listitem><para>Bridges or Gateways to other ESB Core Systems;</para></listitem>
          <listitem><para>Manufacturer specific connectors (e.g. a SAP Connector).</para></listitem>
        </itemizedlist>
      </para>
      
      <para>In literature, these open service endpoint standards are referred to as
      Message Oriented Middleware (MOM) and form the core of an ESB-architecture
      (see the following figure).</para>
      
      <figure id="f1-mom" float="0">
        <title>Message Oriented Middleware with Service Endpoints</title>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="../figures/mom.svg" format="SVG" />
          </imageobject>
        </mediaobject>
      </figure>
      
      <para>Using MOM, the transmitter and the receiver need a SW framework for the
      conversion of the message into or from MOM, respectively. The basic idea of MOM
      is a Multi Protocol Messaging Bus that supports transmission and forwarding of 
      messages asynchronously while considering QoS (Quality of Service).
      </para>
      
      <para>In context with an<emphasis role="bold">ESB-Stub</emphasis>, that provides
      an open service-endpoint, the application-server has to be looked at.</para>
      
      <para>In general an application-server is a server within a computer network, 
      on which specialized services (application-services) are being executed. In 
      the strict sense an application-server is software acting as a middleware 
      representing a runtime environment for application-services. Depending on
      scaling they are assigned special services like transaction-administration, 
      authentication or access on databases through defined interfaces.</para>
      
      <para>The simplest variant of an application-server is an ESB-stub, that,
      iaw the SOA-mechanisms / -standards provides or integrates one special service
      whereas application-servers integrate multiple special services (application-services)
      through an ESB-Stub and, depending on their realization, offer more capabilities 
      (functions).</para>
      
      <para>Amongst others, through an ESB-stub / application-server the following
      functions are available:
        <itemizedlist>
          <listitem><para>start service,</para></listitem>
          <listitem><para>stop service,</para></listitem>
          <listitem><para>request status of a service,</para></listitem>
          <listitem><para>unlock service for use,</para></listitem>
          <listitem><para>lock/deny service for use.</para></listitem>
        </itemizedlist>
      </para>
      
      <para>However the ESB-Stub cannot support the function "star service", because
      no component is active that can accept and execute the demand for start on
      a provider that is shut down. This would require an additional agent. The 
      functions being provided by an ESB-stub / application-server are used for 
      example by a service management system.</para>
      
      <para>This gives the following requirements for SRE:
        <orderedlist inheritnum="ignore" continuation="restarts">
          <listitem><para>Through the ESB (ESB-stub) the providers have to provide 
            open, standardized service-endpoints to the consumers.</para></listitem>
          <listitem><para>Through application-servers multiple providers have to be
            integrated and to be made available through a global, open service-endpoint.
            </para></listitem>
          <listitem><para>The ESB-stub / application-server has to provide a 
            service-management-interface, that enables; start service(s), stop service(s), 
            deny service(s), unlock service(s), supervise service(s). Limitation: 
            it may happen that a service cannot be started via the ESB-stub if the 
            ESB-stub is inactive due to a stopped service.</para></listitem>
        </orderedlist>
      </para>
    </sect2>
    
    <sect2>
      <title>Enterprise Service Bus OSI-Layer-Integration</title>
      
      <para>This chapter briefly reviews the fundamentals and the ESB of a reference
      environment for services (SRE) will be assigned its place within the OSI reference
      model. Based on this, in the following chapter, the standards will be identified
      based on the WS-I profiles.</para>
      
      <para>The following figure shows the ESB within the OSI-Layer-Model and its
      allocation to a specific layer, respectively.</para>
      
      <figure id="f1-esblayermodel" float="0">
        <title>OSI-Layer Model with ESB Allocation</title>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="../figures/esblayermodel.svg" format="SVG" />
          </imageobject>
        </mediaobject>
      </figure>
      
      <para>The <emphasis role="bold">Data Link / physical Layer</emphasis> encompasses
      the OSI-layers 1 (bit transfer) and 2 (security layer). On the bit-transfer-layer
      the digital transfer of bits is done on either on a wired or a non-wired transmission
      line. It is the task of the security layer (also being referred to as: section
      security layer, data security layer, connectivity security layer, connection
      layer or procedural layer) to ensure reliable transfer and to manage access 
      onto the transmission media.</para>
      
      <para>The <emphasis role="bold">Network Layer</emphasis> represents OSI-Layer
      3 (Mediation Layer). For circuit-based services the mediation layer (also: 
      packet-layer or network layer) does the switching of connections and for
      packet-oriented services it does the external distribution of data packages.
      The main task of the mediation layer is the built-up and update of routing
      tables and the fragmentation of data-packages.</para>
      
      <para>Within the above figure dedicated as <emphasis role="bold">TCP</emphasis>
      and <emphasis role="bold">UDP</emphasis> – is the lowest layer that provides 
      a complete end-to-end-communication between sender (transmitter) and recipient 
      (receiver). It offers to the application-oriented layers 5 to 7 a standardized 
      access, so they do not have to consider these features of the communication 
      network.</para>
      
      <para>The <emphasis role="bold">Session Layer</emphasis> corresponds to OSI-layer
      5 (Communication Control Layer). It provides control of logical connections 
      and of process communication between two systems. Here we find the protocols 
      like HTTP, RPC, CORBA (IIOP, ORB), JMS, etc.</para>
      
      <para>Above of the Communication Control Layer we find the <emphasis role="bold">
      Presentation Layer</emphasis>, which is OSI-Layer 6. The presentation layer
      translates the system-dependant presentation of data into a system-independent
      presentation and thereby enables the syntactically correct data-exchange between 
      different systems. Also data-compression and data-encryption is a task of layer
      6. The presentation layer ensures that data being sent from the application 
      layer of one system can be read by the application layer of another system. 
      If necessary the presentation layer acts as a translator between various data 
      formats by using a data format that is under-stood by both systems.</para>
      
      <para>The <emphasis role="bold">Enterprise Service Bus</emphasis> with its
      capabilities forms a possible realization of an OSI layer 6 (presentation layer),
      that is based on the functions of OSI layer 5 and enables access or provision
      of data for the applications (<emphasis role="bold">consumer, provider</emphasis>)
      at OSI layer 7.</para>
      
      <para>In the following figure the ESB at OSI-layer 6 (presentation layer) is 
      depicted in more detail and amended by essential standards that an ESB is based
      on.</para>
      
      <figure id="f1-esblayer" float="0">
        <title>ESB Layer with Standards (excerpt)</title>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="../figures/esblayer.svg" format="SVG" />
          </imageobject>
        </mediaobject>
      </figure>
      
      <para>Through the service endpoint the provider provides a service that can 
      be used by one or more con-sumers via the ESB. Additionally the ESB, through 
      the SOA-(ESB-) infrastructure, currently offers an UDDI / ebXML-based directory
      service. <emphasis role="bold">Universal Description Discovery and Integration 
      (UDDI)</emphasis> is a standardized directory for publication and search of
      services. UDDI is realized in numerous products; however there is no further
      development of UDDI. <emphasis role="bold">Electronic Business using XML (ebXML)
      </emphasis>is a family of different standards from UN/CEFACT and OASIS and 
      comprises a registry service (Registry Service Specification) with a Registry 
      Information Model (ebRIM). ebXML is relatively new, contains numerous urgently
      needed expansions of UDDI and is still under further development. However, 
      ebXML is not yet available in many products.</para>
      
      <para>UDDI and ebXML use <emphasis role="bold">Web Service Definition Language
      (WSDL)</emphasis> as service description language.</para>
      
      <para>For example an ESB provides to a service-provider (Provider) and one 
      or more users (Consumer) the following functions (extract):
        <itemizedlist>
          <listitem><para>Routing and Messaging as basic services;</para></listitem>
          <listitem><para>Security (signature and encryption);</para></listitem>
          <listitem><para>Transformation and Mapping, to execute various conversions 
            and transformations;</para></listitem>
          <listitem><para>Procedures for compression in order to reduce the amount
            of data for transmission;</para></listitem>
          <listitem><para>A virtual communication bus, that permits the integration 
            of different systems through pre-designed adaptors;</para></listitem>
          <listitem><para>Mechanisms for the execution of processes and rules;</para></listitem>
          <listitem><para>Supervision functions for various components;</para></listitem>
          <listitem><para>A set of standardized interfaces like e.g. JMS (Java Messaging 
            Specification), JCA (Java Connector Architecture) and SOAP / HTTP.</para></listitem>
        </itemizedlist>
      </para>
      
      <para>A standard to be highlighted amongst the others like e.g. JMS, that an 
      ESB is based on, is <emphasis role="bold">SOAP (Simple Object Access Protocol)
      </emphasis>– a W3C-recommendation. SOAP is a “lightweight” protocol for the 
      exchange of XML-based messages on a computer network. It establishes rules 
      for message design. It regulates how data has to be represented in a message
      and how it has to be interpreted. Further on it provides a convention for 
      remote call-up of procedures by using messages.</para>
      
      <para>SOAP makes no rules on semantics of application-specific data that shall
      be sent but provides a framework which enables the transmission of any application-specific
      information.</para>
      
      <para>SOAP is used for the remote call-up of procedures as well as for simple 
      message systems or for data exchange. For the transmission of messages any 
      protocols (OSI-Layer 5) such as FTP, SMTP, HTTP or JMS can be used.</para>
    </sect2>
    
    <sect2>
      <title>Communication based on loose Coupling</title>
      
      <para>A loose coupling – a basic SOA principle – is a principle and not a tool.
      When designing a SOA envi-ronment the amount of loose couplings to be established
      has to be determined.</para>
      
      <para>Communication with an addressable communication partner can be effected
      in two ways:
        <itemizedlist>
          <listitem><para>In a <emphasis role="bold">connectivity-oriented communication
            </emphasis>environment the communication partner has to be dialed before
            information exchange actually starts and so a communication path between 
            the two endpoints evolved is established through the net (a connection).
            Only then data can be exchanged (the data will always use the very same
            path through the net). When data exchange is terminated, the communication 
            path is shut down. In general the address of the communication partner
            is only needed for the connection-built-up; then the net „remembers“, as 
            well as the endpoints, which connection connects which endpoints.
            </para></listitem>
          <listitem><para>Alternatively the job can be done <emphasis role="bold">
            connectionless: neither</emphasis>an explicit communication-build-up 
            before data exchange nor a shutdown thereafter must be executed. From
            the net perspective there is no established communication relation between
            two endpoints. Consequently there is no pre-determination of the path 
            through the net during connection build-up. Instead each piece of information
            is addressed individually to the recipient and forwarded to the recipient
            by all other pieces of information based on this address in the net. All
            nodes in the net “know” on which paths to reach a certain destination.
            If there is more than one path from the sender to the recipient, different
            pieces of information may use different paths through the net.</para>
            </listitem>
        </itemizedlist>
      </para>
      
      <para>From the communication technology-perspective the main difference is 
      that in contrary to a connectivity-oriented communication no status information 
      for each connection has to be stored in the connectionless communication environment. 
      Two conclusions can be drawn from that:
        <itemizedlist>
          <listitem><para>The resistance to failure of the net increases. If in a 
            connectivity-oriented communication a node in the net fails, all connections
            via this node are terminated; in connectionless communications the pieces
            of information are simply routed around the failing node and communication
            between the endpoints is hardly disturbed.</para></listitem>
          <listitem><para>The net is more scalable because dimensioning of the nodes 
            (e.g. computing power, memory capacity) will limit the number of possible
            connections via this node to a much smaller amount (because no status
            data on connections has to be kept within that node).</para></listitem>
        </itemizedlist>
      </para>
      
      <para>From the different methods of communication (connectivity-oriented vs.
      connectionless communica-tion) the following requirements for the application 
      layer (service producer) can be drawn:
        <orderedlist inheritnum="ignore" continuation="restarts">
          <listitem><para>As radio-based communication systems cannot guarantee a 
            connectivity-oriented communication, the radio-based communication 
            between consumer and provider must be based on connectionless communication.
            </para></listitem>
          <listitem><para>In wideband nets or if connectivity-oriented communication 
            between consumer and provider is supported, communication between consumer 
            and provider may also be realized in a connectivity-oriented manner.
            </para></listitem>
        </orderedlist>
      </para>
      
      <para>This also gives a requirement for management services of a reference
      environment for services (SRE):
        <orderedlist inheritnum="ignore" continuation="restarts">
          <listitem><para>Through the service-registry (service-endpoint-definition)
            the service-management portion of SRE must identify the communication
            method to a service (provider) and provide it to the ESB-stub either
            before use of a service or through a (customer) policy deposited in the
            service registry. The communication method (connectivity-oriented or 
            connectionless) gives a parameter for Quality of Service (QoS) for use
            of a service, that must be provided by the service-management portion 
            of SRE differently (dynamically) depending on network configuration.
            </para></listitem>
        </orderedlist>
      </para>
      
      <para>Middleware can be distinguished by the basic technology it uses: Data
      Oriented Middleware, Remote Procedure Call, Transaction Oriented Middleware,
      Message Oriented Middleware and Component Oriented Middleware.</para>
      
      <para>The most common basic technology is the Message Oriented Middleware.
      It will be applied further on in the SRE. Here information exchange is realized
      with messages being transported by the middleware from one application to the
      next, starting from the ESB-stub. If necessary, message queues will be used.
      </para>
      
      <para>Based on the communication methods Message Oriented Middleware may apply
      different message-exchange-patterns. The message-exchange-patterns differ in:
        <itemizedlist>
          <listitem><para><emphasis role="bold">Request / Response:</emphasis>
            In this pattern the user sends a request to the service-provider and 
            waits for a response. The components involved interact synchronously
            (and in most cases block each other!). The reaction follows immediately
            on the exchanged information. This pattern is mostly used by real-time-systems.
            In order to prevent an application blockade, the response can be awaited 
            asynchronously. Therefore, in general synchronous (blocking) and asynchronous 
            (non-blocking) Request / Response can be distinguished, where the asynchronous
            (non-blocking) Request / Response represents a kind of Request / Callback
            Pattern.</para></listitem>
          <listitem><para><emphasis role="bold">One-Way-Notification:</emphasis>
            If no response or confirmation is needed for a service call-up, then 
            there is a simpler pattern as the request/response pattern. In One-Way-Notification
            a message is just sent („fire and forget“). An error message is then a
            for example a One-Way-Notification.</para></listitem>
          <listitem><para><emphasis role="bold">Request / Response via 2 One-Way-Notification:
            </emphasis> This is a special pattern composed of the two patterns described
            before. Here it has been taken into consideration that this causes an
            additional requirement for the SOA-(ESB-) infrastructure because the 
            concrete sender of an One-Way-Notification must in turn also be the 
            recipient of another (second) One-Way-Notification. Also it has to be
            noted that sequences of One-Way-Notifications are a process in itself.
            </para></listitem>
          <listitem><para><emphasis role="bold">Request / Callback:</emphasis>
            Often a consumer needs data or a feed-back without being blocked until
            it is received. This pattern is referred to as non-blocking or asynchronous 
            Request / Response or Request / Callback, respectively. Here the consumer
            sends a request without blocking. I.e., a response is received when it
            is present or, if there is no response an autonomous response is sent, 
            respectively. This higher flexibility however causes a higher amount 
            of effort, because the application itself must ensure proper handling
            of asynchronous responses.</para></listitem>
          <listitem><para><emphasis role="bold">Publish / Subscribe:</emphasis>
            In this pattern a user registers with a consumer for specific notifications 
            or events. This pattern allows several consumers to subscribe. For specific
            situations, events or state changes registered consumers are informed about
            this. The later distribution of events or state changes is realized using 
            One-Way-Notifications towards registered consumers.</para></listitem>
        </itemizedlist>
      </para>
      
      <para>From this the following requirement for the Message Oriented Middleware 
      (ESB-Stub) of the refer-ence environment for services (SRE) can be derived:
        <orderedlist inheritnum="ignore" continuation="restarts">
          <listitem><para>A Message Oriented Middleware – ESB-Stub – must support 
            the different Message-Exchange-Patterns (synchronous), Request / Response,
            Request / Callback (asynchronous Request / Response), One-Way-Notification
            and Publish / Subscribe.</para></listitem>
        </orderedlist>
      </para>
      
      <para>A message-exchange-pattern always depends on the characteristics of the
      related transport layer or the used protocol, respectively. Things may look
      different one layer above or below. Asynchronous message-exchange-patterns 
      can be implemented on synchronous protocols and vice versa.</para>
      
      <figure id="f1-reliableservicecall" float="0">
        <title>ESB Layer with Standards (excerpt)</title>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="../figures/reliableservicecall.svg" format="SVG" />
          </imageobject>
        </mediaobject>
      </figure>
      
      <para>Even if the transport-layer is not reliable and messages might get lost,
      API may provide a virtually reliable message exchange. (This however may cause
      the disadvantage of undesired additional delay having great influence on the
      availability and QoS of that service). If, for instance, a consumer sends a
      request and is then blocked and the request gets lost so that the consumer
      would not be informed about it, then API could send a second request some time
      later (see above figure).</para>
      
      <para>From the SOA perspective two things are important: Which Message-Exchange-Patterns
      support the underlaid protocol and which Message-Exchange-Patterns eventually
      support an API.</para>
      
      <para>If the ESB is protocol-driven, most likely the application is responsible
      to embody a corresponding mechanisms of an API. If the ESB is API-driven, it 
      is the responsibility of the ESB to support corresponding mechanisms.
      </para>
      
      <para>Beyond the facts described above there are further complex requirements. 
      For example they result from the situation, that an application performs a 
      retry because it didn‘t get a response within time-out. In this case the application
      might just have assumed a lost response. After the retry the application then
      gets two responses. It could also happen that two requests (orders) had been
      sent. This could result in a double debit entry on a bank account instead of 
      only one – as was desired.</para>
    </sect2>
    
    <sect2>
      <title>Cross-domain Service Use and Interoperability</title>
      
      <para>As an information domain is not an island but is required to provide 
      information across domain borders – part of a Networked Operation (NetOpFü)
      – a cross-domain service use is necessary.</para>
      
      <para>With a cross-domain service use, it is important to note that Bundeswehr
      assignments in SRE should be carried out in the Joint and Combined environment.
      This means that cross-domain service use does not only occur within its own 
      (national) technical domain but also within technical domains of external partners
      (e.g. NATO partners).</para>
      
      <para><emphasis>For the purpose of implementing a cross-domain usage of services, 
      no difference is made between internal and external usage. Instead, a united
      mechanism is adopted.</emphasis></para>
      
      <para>A cross-domain use of services calls for an interoperability of the 
      provider and consumer both internally and externally. In order to maintain a
      common understanding, the definitions of interoperability are now briefly 
      re-capped:
        <itemizedlist>
          <listitem><para><emphasis role="bold">Operational interoperability</emphasis>
            denotes the existence of doctrines, operating procedures and common
            standards for human-machine interfaces.</para></listitem>
          <listitem><para><emphasis role="bold">Procedural interoperability</emphasis>
            is then guaranteed when common protocols for exchanging in-formation
            between platforms are applied and if there are common data definitions 
            in the software.</para></listitem>
          <listitem><para><emphasis role="bold">Technical interoperability</emphasis>
            is ensured when common technical parameters / interfaces for transmitting
            information are applied.</para></listitem>
        </itemizedlist>
      </para>
      
      <para>In addition, the ‘technical interoperability’ which forms the basis of 
      the ‘procedural interoperability’ is considered in the context of an ESB.
      </para>
      
      <para>The mechanisms of a cross-domain service use consist of two mechanisms,
      in accordance with the domain concept. The cross-domain service use on technical
      domains is based upon open standardized service end-points.</para>
      
      <para>If a provider makes an open standardized service end point available in 
      a technical domain, the ser-vice end point can be used by a consumer of the
      same domain, as well as by a consumer of a differ-ent technical domain.</para>
      
      <para>In the following figure, the basic principle of the use of open, standardized
      service end points is depicted.</para>
      
      <figure id="f1-technicalserviceuse" float="0">
        <title>Technical Cross-domain Service Use</title>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="../figures/technicalserviceuse.svg" format="SVG" />
          </imageobject>
        </mediaobject>
      </figure>
      
      <para>In general, a consumer needs information about the service (service 
      description) in order to be able to use a service. The consumer typically
      receives such information from their own SOA (ESB) Infrastructure. In doing
      so, the SOA (ESB) Infrastructure of the technical domains to which the consumer
      is assigned, requires this information for a cross-domain service use.</para>
      
      <para>So as to reduce interoperability problems and to guarantee self-sufficient
      consumer / provider configurations in a technical domain, the consumer and 
      provider are assigned to a technical domain and for all infrastructure requirements,
      use the SOA (ESB) Infrastructure of the technical domains.</para>
      
      <para>In order to get the information needed from the local technical domain
      to use a service beyond technical domain borders, this information must first 
      be entered into the technical domain of the consumer.</para>
      
      <para>To this end, a synchronization mechanism between the technical domains
      is provided through, which the relevant data for service use on technical 
      domain borders is distributed (see the following figure).</para>
      
      <figure id="f1-infrastructuresynchronisation" float="0">
        <title>SOA- (ESB-) Infrastructure Synchronization of Technical Domains</title>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="../figures/infrastructuresynchronisation.svg" format="SVG" />
          </imageobject>
        </mediaobject>
      </figure>
      
      <para>If every consumer in a cross-domain service use were to secure themselves
      the information (service description and policies) from the respective technical
      domains (SOA (ESB) Infrastructure), an exchange of this information would take 
      place per consumer across domain borders. With targeted synchronization, the
      information exchange (service descriptions and policies) across domain borders
      would be restricted to a single exchange.</para>
      
      <para>In summary, service use across technical domains occurs by means of an
      open, standardized service end-point and the synchronization of information 
      (service description and policies).</para>
      
      <para>Information domains are, as previously mentioned, user-specific domains
      which from an ESB perspective, are virtual and placed over technical domains.
      Generally speaking, a consumer or a provider can only be assigned to one technical
      domain. However, a provider can belong to several different information domains
      whereby consumers can use providers from different information domains.</para>
      
      <para>The information domains are defined, among others, by authorization 
      (policies) which are to be drawn up for services using the service description. 
      The type of the authorization (policies) for a service can therefore vary greatly.
      For example, the authorization regulations may be composed of:
        <itemizedlist>
          <listitem><para>The <emphasis role="bold">classification of data</emphasis>
            of the service (security requirements);</para></listitem>
          <listitem><para>The <emphasis role="bold">Quality of Service</emphasis>
            of the transmission medium (for example, broadband / narrowband of the 
            transmission medium) which the service requires;</para></listitem>
          <listitem><para>etc.</para></listitem>
        </itemizedlist>
      </para>
      
      <para>Synchronization between the information domains is not provided for, 
      since the information necessary for a cross-domain service use is provided 
      to the consumer via the SOA (ESB) Infrastructure in which this is statically 
      recorded.</para>
      
      <para>From the cross-domain use of services the following capabilities can be
      derived for the ESB:
        <orderedlist inheritnum="ignore" continuation="restarts">
          <listitem><para>The cross-domain use of services across technical domains 
            is based on open, standardized end points.</para></listitem>
          <listitem><para>Every consumer and provider is assigned to a technical
            domain which provides the consumer and provider with an SOA (ESB) Infrastructure.
            Exceptions to this rule are special consumers / providers (e.g. sensor 
            fields) in the mobile environment as these do not possess their own SOA
            (ESB) Infrastructure.</para></listitem>
          <listitem><para>The information (service description and policies) of a 
            service, which is used across technical domain borders, is exchanged using
            special synchronization mechanisms between technical domains.</para></listitem>
          <listitem><para>Every provider / service can be simultaneously assigned to
            several information zones (domains), yet at least one of these must be
            an information domain.</para></listitem>
          <listitem><para>The information domains overall use of providers / services
            is regulated by means of authorizations (policies).</para></listitem>
          <listitem><para>The authorizations (policies) are drawn up and supplied to the
            consumer via the SOA (ESB) Infrastructure of the technical domain assigned
            to him.</para></listitem>
          <listitem><para>A consumer can, depending on his authorization, (policies) 
            use provider /services of different information domains at the same time.
            </para></listitem>
          <listitem><para>The provider checks the authorization regulations (policies)
            via the SOA (ESB) Infrastructure of the technical domains assigned to him.
            </para></listitem>
        </orderedlist>
      </para>
      
    </sect2>
    
    <sect2>
      <title>Synchronization of SOA (ESB) Infrastructures</title>
      
      <para>The number of technical domains on a national level will in the future
      be relatively high. Furthermore, own technical domains in the respective nations
      will exist with cross-nations service use and supply.</para>
      
      <para>So that a consumer can get the information he requires from his local
      technical domain in order to gain access to a service beyond national or international
      domain borders, this must first be entered into the local technical domain of 
      the service. For this reason, a synchronization mechanism between the technical
      domains is necessary via which the relevant data for the use of a service is 
      distributed .</para>
      
      <para>The following figure depicts the starting point of two technical domains 
      which have no physical connection to one another. Both technical domains are
      self-sufficient and have consumer, provider and an SOA (ESB) Infrastructure
      which provides the consumers in the domains with information regarding the use
      of the locally assigned provider.</para>

      <figure id="f1-2nonconnecteddomains" float="0">
        <title>Starting Point of Two Non-connected Technical Domains</title>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="../figures/2nonconnecteddomains.svg" format="SVG" />
          </imageobject>
        </mediaobject>
      </figure>
      
      <para>If both technical domains were to be physically connected and services 
      on the technical domain borders to be used or provided, an infrastructure 
      service of the respective domain must detect a new / additional technical 
      domain and send a trigger to the SOA (ESB) Infrastructure service for synchronization.
      </para>
      
      <para>Based on this initialization both synchronization services of the SOA (ESB) 
      Infrastructure exchange service information which could be used on domain borders
      (see the following figure). Therefore, each domain only publishes local services
      which are provided via these domain borders. The synchronization service must
      thus take into account the underlying QoS parameters and policies. Using a
      corresponding service classification, the services for which a cross-domain 
      use is permitted are determined and published.</para>
      
      <figure id="f1-2connecteddomains" float="0">
        <title>Synchronization of Two Connected Technical Domains</title>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="../figures/2connecteddomains.svg" format="SVG" />
          </imageobject>
        </mediaobject>
      </figure>
      
      <para>When two technical domains are synchronized, the respective synchronization 
      service continuously checks whether the locally published service information 
      has changed. If a change is detected, then a synchronizations update is conducted.
      </para>
      
      <para>If both technical domains are physically separated (see the following 
      figure), the network service detects that the other network is no longer 
      available and subsequently informs the synchronization service which redelivers
      the published service information of this technical domain.</para>
      
      <figure id="f1-2reseparateddomains" float="0">
        <title>Synchronization of Two Re-separated Technical Domains</title>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="../figures/2reseparateddomains.svg" format="SVG" />
          </imageobject>
        </mediaobject>
      </figure>
      
      <para>In the mobile environment (radio), mechanisms (e.g. Caching) should however
      be provided so as to compensate for any brief network fluctuations.</para>
      
      <para>The synchronizations mechanism is independent from the equipment / provision
      of the technical domains. This means, for example, that the synchronization 
      between mobile and portable / stationary domains can be identical to that in
      a federation of cross-nation domains. The services to be synchronized between
      different technical domains are determined according to a trust relationship
      and the QoS parameters (e.g. transmission medium, IT security).</para>
      
      <para><emphasis role="bold">Synchronization Data</emphasis></para>
      
      <para>Generally speaking, the service information of a service used cross-domain
      which must be synchronized is very extensive. The service information consists
      of the service description (WSDL file), policies, IT security data (e.g. public
      key) and the necessary QoS parameters. Overall, it is thought to be too expensive
      for synchronization in a narrowband network. For synchronizations across narrow 
      band networks, prepared service forms are on hand and only a small section (e.g.
      provider name) is transmitted upon synchronization. For this reason, the synchronization
      data of the service descrip-tion for cross-domain used services must be differently 
      scalable depending on bandwidth.</para>
      
      <para>With broadband transmission mediums, more information can be exchanged,
      up to a complete service description (WSDL File, policies, IT security data
      and the necessary QoS parameters.</para>
      
      <para>Conversely, with narrowband transmission mediums, only the characteristics
      of the service description are transmitted upon synchronization. Based on these 
      characteristics, the services are registered in the SOA (ESB) infrastructure
      with the help of a pre-defined template (form) and thus published.</para>
      
      <para>Due to this, the service descriptions of cross-domain used services are
      to be categorized in advance via templates and the IT security settings and 
      QoS parameters correspondingly defined so that only the necessary characteristics
      are communicated during synchronization. The characteristics, IT security
      settings, QoS parameters, templates (forms) and the synchronization protocol
      used are to be standardized and – at least at NATO level – agreed upon.</para>
      
      <para>From the synchronizations mechanism, the following capabilities for the
      ESB can be derived:
        <orderedlist inheritnum="ignore" continuation="restarts">
          <listitem><para>A synchronization service – assigned to SOA (ESB) Infrastructure
            – distributes service information to other technical domains when it 
            receives a corresponding notification from a network service via a new 
            node. If the synchronization service receives the message that a node/network
            is no longer available from the network service, it deletes the service
            information received from the technical domain assigned to the node / 
            network from its own local SOA (ESB) Infrastructure. When using radio 
            networks, this should not occur until after the adjustable ‘timeout’ 
            period or until a Schmitt-Trigger-Function has occurred in order to 
            ‘compensate’ for recurrent fluctuations in a radio network.</para>
            </listitem>
          <listitem><para>The synchronization service only publishes services across
            domain borders whose use beyond domain borders and for the underlying 
            QoS parameter of the transmitting medium has been approved.</para></listitem>
          <listitem><para>Services which are published by the synchronization service
            are categorized according to an approval for cross-domain use. Additionally,
            the QoS parameter (e.g. broadcast mediums, IT security) plays a part in
            the assessment of a cross-domain use.</para></listitem>
          <listitem><para>A special operational case in the mobile area is ‘radio 
            silence’. Here the status of the synchronization is controlled via manual
            processes. In a one-sided radio silence, synchronization data is transmitted 
            to the receiving nodes by a multicast process and incorporated there.
            </para></listitem>
          <listitem><para>The synchronizations data of the service description of 
            cross-domain used services is scalable. On the one hand, even the complete
            service description (WSDL file), policies, IT security data and the necessary
            QoS Parameter can be exchanged in broadband networks. On the other, only
            the characteristics of the service description are exchanged in narrowband 
            networks, on the basis of which the remote service is recorded and published
            in the SOA (ESB) Infrastructure.</para></listitem>
        </orderedlist>
      </para>
      
      <para>From the synchronizations mechanism, the following requirements on the
        applications layer (service-producer) can be derived:
         <orderedlist inheritnum="ignore" continuation="restarts">
           <listitem><para>Based on pre-defined templates (forms) the services which
             are used cross-domain should be categorized. Therefore, corresponding
             IT security standards and QoS parameters are to be taken into account 
             and specified. It is also to be indicated in the categorization whether
             the service is permitted to be used nationally or multi-nationally.
             </para></listitem>
         </orderedlist>
       </para>
       
       <para><emphasis role="bold">WS-Discovery</emphasis></para>
       
       <para>A special method for synchronisation between various domains is the OASIS 
         WS-Discovery. Service Discovery is the process of finding the services that 
         are available in the network. When operating in a wireless network environment 
         where node mobility and shifting network conditions can cause network partitions 
         and loss of network connections, it is vital to use a service discovery mechanism 
         that does not rely on the availability of any given node. In other words, a 
         fully distributed service discovery mechanism is needed. The only standardized 
         Web service discovery protocol that currently fulfills this requirement by 
         operating in a distributed mode is WS-Discovery.</para>
       
       <para>WS-Discovery is designed for use in one of two modes: managed and ad 
         hoc. In managed mode all nodes communicate through a discovery proxy, an entity 
         which performs the service discovery function of behalf of all the other nodes, 
         and which communicates with the other nodes using unicast messages. This mechanism 
         can be used to achieve interoperability between registry based service discovery 
         mechanisms and WS-Discovery.</para>
       
       <para>In ad hoc mode, on the other hand, communication is fully distributed. 
         Requests for service information are sent using multicast to a known address, 
         and each node is responsible for answering requests from others about its own 
         services. The ad hoc mode is intended to be used for local communication only, 
         and the standard recommends limiting the scope of multicast messages by setting 
         the time-to-live (TTL) field of the IPv4 header to 1, or by using a link-local 
         multicast address for IPv6.</para>
       
       <para>In several experiments the used tactical radio networks consist of a number
         of ad hoc networks connected to each other using Multi-Topology Routers (MTRs). 
         The dynamic character of these networks implies that one cannot rely on a 
         managed mode discovery proxy to remain available, meaning that the distributed 
         ad hoc mode should be used. However, since this mode is limited to link local 
         communication it will not provide the multi-network service discovery capability 
         required in interconnected tactical networks. In order to work around this 
         issue, it is recommended to allow the multicast discovery messages to travel 
         across network boundaries by using e.g. a site-local IPv6 address, and increasing 
         the Hop Limit in the IPv6 header. This solution works within a controlled 
         network environment, but it is less than ideal for use in larger scale networks.
         That is because increasing the scope of the multicast messages might cause 
         the messages to travel further than intended, and thus cause increased network 
         load in networks where the messages are not needed.</para>
       
       <para>As it is recommended to allow packets to flow across routers, a request 
         sent by any one node in the network is received by all other nodes. If the message
         sent was a probe for available services, then all nodes that did offer a service
         matching the request would reply with a unicast message to the sender. </para>
       
       <para>WS-Discovery can be completely integrated into an ESB, and connected to 
         the internal service registry. This meant that any announcement made on WS-Discovery
         would be added to the service registry, which in turn meant that the announced 
         service could be invoked from any consumer. If WS-Discovery is used as the 
         only discovery mechanism it is used as a self-contained WS-Discovery application
         and therefore used for announcing and searching for services. </para>
       
       <para>As mentioned above, allowing the multicast packets to traverse routers is 
         not an ideal solution. An alternative is to combine the managed and ad hoc
         modes in one deployment. When a WS-Discovery proxy announces its presence, 
         all other nodes are asked to enter managed mode, relying on the proxy for 
         service discovery. However, the WS-Discovery specification does not require 
         the nodes to change to managed mode, and by allowing the majority of nodes 
         to remain in ad hoc mode and at the same time keep a link local message scope, 
         one can secure local service discovery without the risk of generating unneeded
         network traffic in other networks. Combined with discovery proxies that function
         as relays between the networks, cross-network discovery can be achieved as 
         well.</para>
       
       <para>Note that, even though the WS-Discovery specification does allow nodes 
         to choose not to enter managed mode when receiving a message telling it to 
         do so, it does not clearly state what the expected behavior of nodes is once 
         the network consists of nodes in both modes simultaneously. This combination 
         of modes is desirable when working with multiple interconnected mobile networks, 
         and therefore a profile of how to use the WS-Discovery standard in this context 
         should be developed by NATO for interoperability between nations.</para>
       <para>Because of the above mentioned priority of this service, it is recommended
         to add WS-Discovery to NATO's core services set.</para>     
     </sect2>
     
     <sect2>
       <title>Basic Security Considerations</title>
       
       <para>One of the basic protocols of the ESB is the Simple Object Access Protocol
       (SOAP). SOAP is a standar-dized XML-based, platform-independent communication 
       protocol for synchronous and asynchronous message exchanges between applications.
       </para>
       
       <para>For the access or supply of classified information, the ESB offers a 
       security concept (approach) in order to ensure protection of data / information 
       objects (Property Protection). Property Protection is based upon XML/ SOAP 
       messages and consists of the following basic technologies (see also the following 
       figure):
         <itemizedlist>
           <listitem><para><emphasis role="bold">XML Encryption:</emphasis> XML Encryption
             enables sections or individual elements of an XML document to be completely
             or partly encrypted. The encryption elements contain all encryption information.
             </para></listitem>
           <listitem><para><emphasis role="bold">XML Digital Signature:</emphasis>
             XML Digital Signature enables sections or individual elements of an XML
             document to be signed.</para></listitem>
           <listitem><para><emphasis role="bold">XML Token:</emphasis> XML Security 
             Tokens describe how and which authentication mechanisms should be employed. 
             Two Security Token mechanisms, X.509 Certificate and SAML Assertion are 
             currently standardized.</para></listitem>
         </itemizedlist>
       </para>
       
       <para>Based on these basic technologies, for classified service information 
       (data), exchange relationships, together with appropriate policies and security 
       definitions for the exchange relationships are to be described.</para>
       
       <figure id="f1-esbsecurityelements" float="0">
        <title>ESB Property Protection Security Elements</title>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="../figures/esbsecurityelements.svg" format="SVG" />
          </imageobject>
        </mediaobject>
      </figure>
      
      <para>The X.509 certificate mechanism will not be further discussed since it
      is a general security procedure and used via the PKI from ESB of the X.509 
      certificate mechanism.</para>
      
      <para>The Security Assertion Mark-up Language (SAML) is an XML Framework for
      the exchange of authentication and authorization information. The SAML architecture
      provides functions to describe transmit and control safety-related information.
      </para>
      
      <figure id="f1-secarch" float="0">
        <title>Property Protection IT Security Architecture</title>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="../figures/secarch.svg" format="SVG" />
          </imageobject>
        </mediaobject>
      </figure>
      
      <para>A Property Protection IT Security Architecture based on an SAML Architecture 
      is depicted in the above figure. This forms an extended SAML Architecture since
      here a binding (authenticity), integrity, availability test is carried out on
      the part of the provider and consumer.</para>
      
      <para>The individual steps which are processed via the Policy Enforcement Point
      or at the receiving end via the Policy Decision Point (PDP) are, depending on 
      the predetermined service policies repeatedly running the same process steps.
      </para>
      
      <para>Modeled on [8], the following possible steps are executed when accessing
      a service in the Property Protection of IT- Security Architecture (see above
      figure):
        <orderedlist inheritnum="ignore" continuation="restarts">
          <listitem><para>From the outset, the asset protection of the PEP (Policy 
            Enforcement Point) is either triggered by a consumer request (data request)
            or a provider response (or notification).</para></listitem>
          <listitem><para>Depending on the policy of the service (included in the 
            service description), a certificate-based login is implemented (for example
            through the operating system) or the login data identified.</para></listitem>
          <listitem><para>Before accessing a service, several certificates are required
            which may be created by the Public Key Infrastructure (PKI) and retrieved
            via XKISS</para></listitem>
          <listitem><para>Upon accessing the service (properties previously determined
            using the ESB Service Registry), the PEP sends a SOAP request or upon 
            response / notification, the PEP of the provider sends a SOAP response
            / notification via Middleware (ESB) to the provider or consumer. The PEP 
            (Policy Enforcement Point) receives the SOAP request / response and then
            initiates an examination.</para></listitem>
          <listitem><para>The PEP sends off the examination to the PDP (Policy Decision 
            Point)</para></listitem>
          <listitem><para>The PDP sends off a ‘policy query’ to the PRP (Policy Retrieval
            Point) which in turn answers with a ‘policy statement’.</para></listitem>
          <listitem><para>Simultaneously, the PDP sends validation instructions (user, 
            resource, and/or context attributes via ‘Statement Services’) to the PIP 
            (Policy Information Point) which, using several additional services, 
            checks the various information. Finally it sends the results to the PDP.
            </para></listitem>
          <listitem><para>Based on the results, the PEP receives the outcome from
            the PDP.</para></listitem>
          <listitem><para>At the same time, access to the service is logged by the
            PEP.</para></listitem>
          <listitem><para>If all checks are successful and access granted, the PEP 
            forwards the request to the provider or the response to the consumer.
            </para></listitem>
        </orderedlist>
      </para>
      
      <para>Crucial to the Property Protection of IT Security Architecture is that
      both provider and consumer conduct a review of the binding (authenticity),
      integrity and availability of the respective partner. Only through such a 
      mechanism can the binding (authenticity), integrity and availability of the 
      respective partner in the mobile ESB field on the side of Property Protection 
      be guaranteed.</para>
      
      <para>Each service operation should be autonomous and require no other operation.
      </para>
      
      <para>If only a single operation of a service is called up, and all security 
      requirements met, the individual steps must be processed by the consumer and 
      provider. However, these security technologies (encryption and signature) 
      call for additional performance and bandwidth.</para>
      
      <para>If several service operations are used in succession or it is assured 
      that the use of a service takes place on a secured basic protection, the IT 
      security steps for services in the mobile field with a low bandwidth should
      be optimized so that the complete examination does not have to be carried 
      out upon every operation, in view of their performance and low bandwidth.</para>
      
      <para>Such an approach calls for the capability on the part of an ESB (ESB 
      Stub and SOA (ESB) Infrastruc-ture) to be able to manage and check policy
      settings, not just globally for one service but for different policies on the
      operational level of a service. Additionally, the service description (application
      level) states the requirement that global policies are not only to be developed 
      for a service but also for every operation.</para>
      
      <para>The security of information technology is an overarching challenge since
      every IT system considered individually frequently has its own security concept
      (and individual implementation) and consequently, its own security domain.
      An ESB-configuration with Property Protection is no exception.</para>
      
      <para>A challenge, from the perspective of IT security, is to provide participants
      with classified data from a different security <footnote><para>A security domain
      refers to a set of data, identities and services, for whose safety a particular
      organization (or person) is responsible.</para></footnote> or information 
      <footnote><para>Information domains are those domains on an application level
      which are distinguished by certain properties e.g. user groups, organizational
      affiliation, authorizations and / or accessed information</para></footnote> 
      domain to their own (e.g. different authorizations of the users in the domains,
      different classifications of the domains.) To achieve this, cooperating security 
      domains are required.</para>
      
      <para>The binding (authenticity), integrity and availability test by the 
      consumers and providers is carried out via the ESB Stub and the services of
      the assigned SOA (ESB) Infrastructure. In order to use the services of other
      security domains, the relevant security data / information from the respective
      security domain is required. Consequently, additional specialist services of
      the SOA (ESB) Infrastructure are necessary in order to, for example, synchronize the relevant security data/information of the co-operating security domains.
      </para>
    </sect2>
    <sect2>
      <title>Notification</title>
        <para>The specification: Web Services Notification (WS*-Notification) defines
          mechanisms for ap-plications which would like to generate, distribute or
          receive notifications (one-way notifica-tions). Here the Publish / Subscribe 
          mechanism is used to which an application registers to receive (subscribe)
          certain notifications. Applications also provide notifications which should
          be distributed.</para>
        <para>For different notification patterns, the following concepts are introduced
        </para>
        <para><emphasis role="bold">Publisher:</emphasis> A Publisher sends a notification 
          to a Broker or to one or more Notification Con-sumers. A Publisher Application 
          does not necessarily provide an open service endpoint.</para>
        <para><emphasis role="bold">Subscriber:</emphasis> A Subscriber conducts a 
          subscription for a Notification Consumer application. In doing so, the 
          Subscriber can also be the application for a Notification Consumer. A Subscriber 
          Application provides an open service endpoint.</para>
        <para><emphasis role="bold">Notification Consumer:</emphasis>A Notification 
          Consumer receives notifications. A ‘Push Consumer Application’ provides an
          open service endpoint on which the Notification Broker or the Notification
          Producer can send the notification asynchronously. A ‘Pull Consumer Application’ 
          calls up an operation in the Notification Broker or Notification Producer
          in order to receive a notification.</para>
        <para>In general, there are many different concepts and implementation possibilities
          for notification mechanisms. As an example, two different procedures are
          here presented.</para>
        <para><emphasis role="bold">Pattern: Notification Consumer / Subscriber and 
          Publisher (Subscriber Manager)</emphasis></para>
        <para>In this very simple notification pattern, an Application (subscriber) 
          subscribes to an application (publisher) which sends the notification and
          receives a corresponding message (response) which the Notification Consumer
          receives when the event occurs. When it occurs (3), the Notification Publisher
          informs the Notification Consumer (4) – see next figure:</para>
        <figure id="simplenotif" float="0">
          <title>Simple Notification Pattern</title>
          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="../figures/simple_notif.svg" format="SVG" />
            </imageobject>
          </mediaobject>
        </figure>
        <para>Whether the Notification Broker and the Notification Consumer form an 
          application or whether they are divided into different applications is dependent
          on the selected architecture.</para>
        <para>The Notification Pattern however allows both a separate and a combined 
          implementation.</para>
        <para>In a similar way, the Notification Publisher can also be implemented in 
          two separate applications. Therefore, the Notification Publisher is divided 
          into two parts, the Subscriber Manager and the Notification Publisher. The 
          subscriber manager manages the subscriptions and gives these to the Notification
          Publisher. The Notification Publisher then distributes the notifications to
          the Notification Consumers based on the subscriptions.</para>
        <para>Another notification pattern is the:</para>
        <para><emphasis role="bold">Pattern: Notification Broker, Publisher Registration
          Manager and Subscription Manager.</emphasis></para>
        <para>Here a network layer (network service) is inserted, on which the notification
          mechanism via Publish / Subscribe takes place:</para>
        <itemizedlist>
          <listitem><para>The <emphasis role="bold">Notification Broker</emphasis> is
            a service which receives the received notifications from the Notification 
            Producer (publisher) and distributes these to the registered Notification 
            Consumer. In addition, via a Subscriber Manager (if a part of the Notification 
            Producer), notifications are registered to a Notification Broker or modifications 
            carried out.</para></listitem>
          <listitem><para>The <emphasis role="bold">Publish Registration Manager</emphasis>
            provides an open service endpoint using which, ap-plications for notifications
            can be registered. These registered applications are delivered to the 
            Notification Broker for it to send.</para></listitem>
          <listitem><para>The <emphasis role="bold">Subscription Manager</emphasis> can 
            be integrated into the application (Notification Broker) but can also be
            a separate application via which the notification could be created, access
            configured and adjustments made.</para></listitem>
        </itemizedlist>
        <para>In the next Figure, the WS-*Notification Architecture for a Notification
          Broker is depicted. In the Notification Pattern via Notification Broker, the
          notifications which should be distributed are conveyed to the Notification
          Broker via a Subscriber Manager or are managed respectively (1). Notification
          Consumers register for the Publish Registration Manager via a Subscriber (2).
          If an event occurs with a Publisher (3), the Publisher sends the notification
          to the Notification Broker (4). The Notification Broker sends (6) the notification
          to the Notification Consumer communicated by the Publish Registration Manager.
        </para>
        <figure id="brokernotif" float="0">
          <title>Notification Pattern via Notification Broker</title>
          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="../figures/broker_notif.svg" format="SVG" />
            </imageobject>
          </mediaobject>
        </figure>
        <para>The mechanism of the notification via Publish / Subscribe can be implemented
          in two possible ways. Therefore, there are also two specifications:</para>
        <itemizedlist>
          <listitem><para><emphasis role="bold">WS*-Notification Framework</emphasis>
            specifies data transfer for web services associated with the Publish-Subscribe 
            process and is composed of the following standards:</para>
            <itemizedlist>
              <listitem><para><emphasis role="bold">WS*-Base Notification:</emphasis> 
                defines service interfaces for Notification Producers and consumers 
                which are required as basic roles for the notification message exchange.
              </para></listitem>
              <listitem><para><emphasis role="bold">WS*-Topic</emphasis> defines mechanisms
                relating to the organization and categorization of the interesting
                elements of subscriptions.</para></listitem>
              <listitem><para><emphasis role="bold">WS*-Brokered Notification</emphasis>
                defines the interface for Notification Brokers.</para></listitem>
            </itemizedlist></listitem>
          <listitem><para><emphasis role="bold">WS*-Eventing Specification</emphasis>
            WS*-Eventing enables the use of Publish/Subscribe design patterns in services.
            The Services Eventing Protocol defines messages for subscribing to an event
            source, for the termination of a subscription and for the sending of messages 
            about events.</para></listitem>
        </itemizedlist>
        <para>The architecture of the Notification Services according to the pattern:
          Notification Broker, Publisher Registration Manager and Subscription Manager
          is based on the WS*-Notification specification and thus contains the services:
          <itemizedlist>
            <listitem><para>Notification Registration Manager;</para></listitem>
            <listitem><para>Notification Broker;</para></listitem>
            <listitem><para>Notification Subscription Manager.</para></listitem>
          </itemizedlist>
        </para>
        <figure id="notification" float="0">
        <title>tactESB Notification Service Architecture</title>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="../figures/notification.svg" format="SVG" />
          </imageobject>
        </mediaobject>
      </figure>
      <para>The service definition for the notification service is specified in [10].</para>
    </sect2> 
  </sect1>
  
  <sect1>
    <title>Related Standards and Profiles</title>      
    <sect2>
      <title>Communication Services</title>
        <para>Communications Services interconnect systems and mechanisms for the opaque transfer of selected
          data between or among access points, in accordance with agreed quality parameters and without change
          in the form or content of the data as sent and received. Internet Protocol (IP) technology is the
          enabler of adaptive and flexible connectivity. Its connectionless structure, with its logical 
          connectivity, provides scalability and manageability and is also future-proof by insulating services
          above from the diverse transport technologies below. Tactical usage of these communication services
          dictates some specialties, where specifications are needed with a modified behaviour because of the
          nature of the communication means and the requirments towards robustness and perhabs autonomous 
          operation. All new equipment, services and applications must support a dual IPv4/IPv6 stack 
          implementation in addition.</para>
        <table frame="all">
          <title>Communication Services Standards</title>
          <tgroup cols="3">
            <colspec colwidth="20*" />
            <colspec colwidth="50*" />
            <colspec colwidth="30*" />
            <thead>
              <row>
                <entry>
                  <emphasis role="bold">ID:Purpose</emphasis>
                </entry>
                <entry>
                  <emphasis role="bold">Standard</emphasis>
                </entry>
                <entry>
                  <emphasis role="bold">Guidance</emphasis>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>1:Naming and addressing</entry>
                <entry>Classless Inter Domain Routing (IETF RFC 4632)
                  <para>Host Extensions for IP Multicasting (IETF RFC 1112)</para>
                  <para>The Internet Multicast Address Allocation (IETF RFC 2908)</para>
                  <para>IANA Guidelines for IPv4 Multicast Address Assignments (IETF RFC 3171)</para>
                  <para>Administratively Scoped IP Multicast (IETF RFC 2365)</para></entry>
                <entry></entry>
              </row>
              <row>
                <entry>2:Basic connectivity between technical services</entry>
                <entry>Internet Protocol (IETF RFCs 791/792, 919/922/950/1112, 1812, 2644)
                  <para>Internet Protocol, Version 6 (IPv6) (IETF RFCs 2460/2474/3484/3810/4291/4443/4861/5095)</para>
                  <para>QoS: TBD</para>
                  <para>User Datagram Protocol (IETF Standard 6, RFC 768)</para>
                  <para>Transmission Control Protocol (IETF Standard 7, RFC 793 updated by RFC 3168)</para></entry>
                <entry>IP networking. Accommodate both IPv4 and IPv6 addressing.
                  <para>Utilize Quality of Service capabilities of the network: TBD</para>
                  <para>MTU reduced to 1300 bytes, MSS set to 1260 bytes in order to accommodate IP crypto tunnelling within autonomous systems</para></entry>
              </row>
              <row>
                <entry>3a:Connectivity between coalition networks (autonomous systems)</entry>
                <entry>Border Gateway Protocol V4 (IETF RFC 4271, 1997, 4760, 3392, 2545)
                  <para>Optimized Link State Routing (IETF RFC 3626)</para>
                  <para>Open Shortest Path First v3 (IETF RFC 5340)</para>
                  <para>Support of Address Families in OSPFv3 (IETF RFC 5838)</para>
                  <para>Simplified Multicast Forwarding (IETF RFC 6621)</para></entry>                  
                <entry>BGP deployment guidance in RFC 1772 must be considered. (RFC 4271 obsoletes RFC 1771)
                  <para>The mapping between SMF and PIM-SM is still an open issue and has to be solved.
                    (across BGP or in parallel)</para></entry>
              </row>
              <row>
                <entry>3b:Connectivity between coalition networks (autonomous systems)</entry>
                <entry>Point-to-point (PPP) (IETF Standard 51)
                  <para>Challenge handshake authentication protocol (CHAP) (IETF RFC1994).</para>
                  <para>RObust Header Compression (IETF RFC 4995)</para>
                  <para>IP Version 6 over PPP (IETF RFC 5072) (for IPv6 only)</para>
                  <para>Border Gateway Protocol V4 (IETF RFC 4271, 1997, 4760, 3392, 2545)</para>
                  </entry>
                <entry>BGP deployment guidance in RFC 1772 must be considered. (RFC 4271 obsoletes RFC 1771)</entry>
              </row>
              <row>
                <entry>4:Provide communications security over the network within the 
                  Network Layer</entry>
                <entry>Mandatory: IPsec (RFC 5246)
                  <para> IPsec Discovery Protocol (Reference TBD)</para></entry>
                <entry></entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </sect2>
      <sect2>
        <title>Core Enterprise Services</title>
        <para>Core Enterprise Services (CES) provide generic, domain independent, technical 
          functionality that enables or facilitates the operation and use of Information Technology
          (IT) resources. CES will be broken up further into:</para>
        <itemizedlist>
          <listitem><para>Infrastructure Services (incl. Information Assurance (IA) services)</para></listitem>
          <listitem><para>Service Oriented Architecture (SOA) Platform Services</para></listitem>
          <listitem><para>Enterprise Support Services</para></listitem>
        </itemizedlist>
        <sect3>
          <title>Infrastructure Services</title>
            <para>Infrastructure Services provide software resources required to host services in a 
              distributed and federated environment. They include computing, storage and high-level
              networking capabilities.</para>
            <table frame="all">
            <title>Infrastructure Services Standards</title>
            <tgroup cols="3">
              <colspec colwidth="20*" />
              <colspec colwidth="50*" />
              <colspec colwidth="30*" />
              <thead>
                <row>
                  <entry>
                    <emphasis role="bold">ID:Purpose</emphasis>
                  </entry>
                  <entry>
                    <emphasis role="bold">Standard</emphasis>
                  </entry>
                  <entry>
                    <emphasis role="bold">Guidance</emphasis>
                  </entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>1:Distributed Time Services: Time synchronization</entry>
                  <entry>Mandatory: Network Time Protocol version 3 (NTPv3), dated March 1992. RFC 1305
                    <para>Option A members must be able to provide a time server on their network element
                      either directly connected to a stratum-0 device or over a network path to a stratum-1 
                      time server of another Option A member.</para>
                    <para>Option B members must use the time service of their host.</para></entry>
                  <entry>A stratum-1 time server is directly linked (not over a network path) to a reliable
                    source of UTC time (Universal Time Coordinate) such as GPS, WWV, or CDMA transmissions 
                    through a modem connection, satellite, or radio.
                    <para>The W32Time service on all Windows Domain Controllers is synchronizing time through
                      the Domain hierarchy (NT5DS type).</para></entry>
                </row>
                <row>
                  <entry>2:Domain Name Services: Naming and Addressing on a tactical instance</entry>
                  <entry>Domain Name System (IETF Standard 13, RFC 1034/RFC 1035)</entry>
                  <entry>The use of a DNS in a tactical network is optional.</entry>
                </row>
                <row>
                  <entry>3:Identification and addressing of objects on the network.</entry>
                  <entry>RFC 1738, Uniform Resource Locators (URL), 20 December 1994
                    <para>RFC 2396, Uniform Resource Identifiers (URI), Generic Syntax, August 
                      1998 (updates RFC 1738)</para></entry>
                  <entry>Namespaces within XML documents shall use unique URLs or URIs for the namespace designation.</entry>
                </row>
                <row>
                  <entry>4:Infrastructure IA Services: Facilitate the access and authorization between tactical users and services.</entry>
                  <entry>Directory access and management service:
                    <para>Version 3 of the Lightweight Directory Access Protocol (LDAPv3), RFC 4510
                        and associated LDAP Technical Specification (RFC 4511-4519)</para>
                    <para>LDAP Interchange Format, RFC 2849</para>
                    <para>Public Key Infrastructure: Version 3 public-key certificates and
                      Version 2 CRLs in accordance with ITU-T X.509v3</para></entry>
                  <entry>Options available to tactical members when joining their network element:
                    <itemizedlist>
                      <listitem><para>Join global Forest</para></listitem>
                      <listitem><para>Create standalone forest</para></listitem>
                    </itemizedlist>
                    <para>(Option 1should be considered before option 2).</para>
                    <para>Whilst LDAP is a vendor independent standard, in practice Microsoft Active Directory
                      (AD) is a common product providing directory services on national and NATO owned Mission 
                      Network elements. AD provides additional services aside from LDAP like functionality.</para></entry>
                </row>
              </tbody>
            </tgroup>
            </table>
        </sect3>
        <sect3>
          <title>SOA Platform Services</title>
            <para>SOA Platform Services provide a foundation to implement web-based services in a 
              loosely coupled environment, where flexible and agile service orchestration is a 
              requirement. They offer generic building blocks for SOA implementation (e.g. discovery,
              message busses, orchestration, information abstraction and access, etc.) and can be
              used as a capability integration platform in a heterogeneous service-provisioning 
              ecosystem.</para>
            <table frame="all">
            <title>SOA Platform Services and Data Standards</title>
            <tgroup cols="3">
              <colspec colwidth="20*" />
              <colspec colwidth="50*" />
              <colspec colwidth="30*" />
              <thead>
                <row>
                  <entry>
                    <emphasis role="bold">ID:Purpose</emphasis>
                  </entry>
                  <entry>
                    <emphasis role="bold">Standard</emphasis>
                  </entry>
                  <entry>
                    <emphasis role="bold">Guidance</emphasis>
                  </entry>
                </row>
              </thead>
              <tbody>           
                <row>
                  <entry>1: Web Platform Services</entry>
                  <entry>Hypertext Transfer Protocol HTTP 1.1 (RFC 2616)
                    <para>Uniform Resource Identifier (URI): Generic Syntax (RFC 3938)</para></entry>
                  <entry>HTTP shall be used as the transport protocol for information without 
                    'need-to-know' caveats between all service providers and consumers.</entry>
                </row>
                <row>
                  <entry>2:Publishing information including text, multimedia, hyperlink 
                    features, scripting languages and style sheets on the network</entry>
                  <entry>HTML 4.01(RFC2854:2000), HyperText Markup Language (HTML), W3C</entry>
                  <entry></entry>
                </row>
                <row>
                  <entry>4:General formatting of information for sharing or exchange</entry>
                  <entry>Extensible Markup Language (XML), v1.0 3rd Edition
                    <para>XML Schema: Structures 1.0</para>
                    <para>XML Schema: Data types 1.0 XML Namespaces: W3C (REC-xmlnames-1999-01-14)</para>
                    <para>XML compression (Reference TBD)</para></entry>
                  <entry>XML shall be used for data exchange to satisfy those IERs that are not 
                    addressed by a specific information exchange standard. XML Schemas and namespaces 
                    are required for all XML documents.
                    <para>Currently, for XML compression, GZIP is used</para></entry>
                </row>
                <row>
                  <entry>7: Message Security for web services</entry>
                  <entry>WS-Security: SOAP Message Security 1.1
                    <para>XML Encryption Syntax and Processing (dtd. 10 December 2002)</para>
                    <para>XML Signature Syntax and Processing 1.0 (Second Edition)</para>
                    <para>WS-I Basic Security profile 1.1</para></entry>
                  <entry>Specifies how integrity and confidentiality can be enforced on messages
                    and allows the communication of various security token formats, such as SAML, 
                    Kerberos, and X.509v3. Its main focus is the use of XML Sig nature and XML 
                    Encryption to provide end-to-end security.
                    <para>Specifies a process for encrypting data and representing the result in XML.
                      Referenced by WS-Security specification.</para>
                    <para>Specifies XML digital signature processing rules and syntax. Referenced 
                      by WS-Security specification.</para></entry>
                </row>
                <row>
                  <entry>8:Security token format</entry>
                  <entry>SAML 2.0
                    <para>Web Services Security: SAML Token Profile 1.1</para></entry>
                  <entry>Provides XML-based syntax to describe uses security tokens containing assertions 
                    to pass information about a principal (usually an end-user) between an identity provider
                    and a web service.
                    <para>Describes how to use SAML security tokens with WS-Security specification.</para></entry>
                </row>
                <row>
                  <entry>9: Security token issuing</entry>
                  <entry>WS-Trust 1.4
                    <para>WS-Federation 1.1</para>
                    <para>WS-Policy 1.5 and WS-Security Policy 1.3</para></entry>
                  <entry>Uses WS-Security base mechanisms and defines additional primitives and extensions
                    for security token exchange to enable the issuance and dissemination of credentials 
                    within different trust domains. Extends WS-Trust to allow federation of different 
                    security realms.
                    <para>Used to describe what aspects of the federation framework are required/supported
                      by federation participants and that this information is used to determine the appropriate
                      communication options.</para></entry>
                </row>
                <row>
                  <entry>10:Transforming XML documents into other XML documents</entry>
                  <entry>XSL Transformations (XSLT) Version 2.0, W3C Recommendation 23 Jan 2007</entry>
                  <entry>Developer best practice for the translation of XML based documents into other formats or schemas.</entry>
                </row>
                <row>
                  <entry>12:Exchanging structured information in a decentralized, distributed 
                    environment via web services</entry>
                  <entry>W3C SOAP 1.1, Simple Object Access Protocol v1.1 (SOAP)
                    <para>WSDL v1.1: Web Services Description Language (WSDL) 1.1, W3C Note, 15 March 2001.</para></entry>
                  <entry>The mandatory method for implementing web-services is SOAP.</entry>
                </row>
                <row>
                  <entry>13:Secure exchange of data objects and documents across multiple security domains</entry>
                  <entry>The Draft X-Labels syntax definition is called the "NATO Profile for the XML 
                    Confidentiality Label Syntax" and is based on version 1.0 of the RTG-031 proposed 
                    XML confidentiality label syntax, see "Sharing of information across communities of
                    interest and across security domains with object level protection" below.</entry>
                  <entry></entry>
                </row>
                <row>
                  <entry>14:Topic based publish / subscribe web services communication</entry>
                  <entry>WS-Notification 1.3 including:
                    <itemizedlist>
                      <listitem><para>WS-Base Notification 1.3</para></listitem>
                      <listitem><para>WS-Brokered Notification 1.3</para></listitem>
                      <listitem><para>WS-Topics 1.3</para></listitem>
                    </itemizedlist></entry>
                  <entry>Enable topic based subscriptions for web service notifications,
                    with extensible filter mechanism and support for message brokers</entry>
                </row>
                <row>
                  <entry>15:Providing transport-neutral mechanisms to address web services</entry>
                  <entry>WS-Addressing 1.0</entry>
                  <entry>Provides transport-neutral mechanisms to addressWeb services and messages
                    which is crucial in providing end-to- message level security, reliable messaging 
                    or publish / subscribe based web services end.</entry>
                </row>
                <row>
                  <entry>16:Reliable messaging for web services</entry>
                  <entry>WS-Reliable Messaging 1.2</entry>
                  <entry>Describes a protocol that allows messages to be transferred reliably between
                    nodes implementing this protocol in the presence of software component, system, 
                    or network failures.</entry>
                </row>
              </tbody>                   
            </tgroup>
            </table>
        </sect3>
        <sect3>
          <title>Information Management Services</title>
            <para>Information Management Services provide technical services "...to direct and support
              the handling of information throughout its life-cycle ensuring it becomes the right 
              information in the right form and of adequate quality to satisfy the demands of an
              organization." These services support organizations, groups, individuals and other
              technical services with capabilities to organize, store and retrieve information 
              (in any format, structured or unstructured) through services and managed processes,
              governed by policies, directives, standards, profiles and guidelines.</para>
            <table frame="all">
            <title>Information Management Services and Data Standards</title>
            <tgroup cols="3">
              <colspec colwidth="20*" />
              <colspec colwidth="50*" />
              <colspec colwidth="30*" />
              <thead>
                <row>
                  <entry>
                    <emphasis role="bold">ID:Purpose</emphasis>
                  </entry>
                  <entry>
                    <emphasis role="bold">Standard</emphasis>
                  </entry>
                  <entry>
                    <emphasis role="bold">Guidance</emphasis>
                  </entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>1:Enterprise Search Services: Automated information resource discover, information extraction and interchange of metadata</entry>
                  <entry>TIDE Information Discovery (v2.3.0, Oct 2009)
                    <para>TIDE Service Discovery (v.2.2.0 Oct 2008)</para></entry>
                  <entry>The technical implementation specifications are part of the TIDE 
                      Transformational Baseline v3.0, however, Query-by-Example (QBE), has 
                      been deprecated with the TIDE Information Discovery specs v2.3.0 and 
                      replaced by SPARQL.</entry>
                </row>
              </tbody>
            </tgroup>
            </table>
        </sect3>
        <sect3>
          <title>Geospatial Services</title>
            <para>Geospatial Services deliver network-based access to quality raster, vector 
              and terrain data, available in varying degrees of format and complexity. Geospatial
              Services form a distinct class of information services through their unique 
              requirements for collecting, converting, storing, retrieving, processing, analysing, 
              creating, and displaying geographic data. The generic nature of Geospatial 
              Services - "organizing information by location" - is interdisciplinary and not
              specific to any Community of Interest (COI) or application.</para>
            <table frame="all">
            <title>Geospatial Services and Data Standards</title>
            <tgroup cols="3">
              <colspec colwidth="20*" />
              <colspec colwidth="50*" />
              <colspec colwidth="30*" />
              <thead>
                <row>
                  <entry>
                    <emphasis role="bold">ID:Purpose</emphasis>
                  </entry>
                  <entry>
                    <emphasis role="bold">Standard</emphasis>
                  </entry>
                  <entry>
                    <emphasis role="bold">Guidance</emphasis>
                  </entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>1:Distribution of geospatial data as maps rendered in raster image formats.</entry>
                  <entry>OGC 04-024 (ISO 19128:2005), Web Map Service (WMS) v.1.3
                    <para>OGC 05-078r4, OpenGIS Styled Layer Descriptor Profile of the Web Map Service (SLD) v.1.1.0</para>
                    <para>OGC 07-057r7, OpenGIS Web Map Tile Service Implementation Standard (WMTS) v.1.0.0</para></entry>
                  <entry>WMTS are to be provided as a complimentary service to WMS to ease access to users 
                    operating in bandwidth constraint environments. WMTS trades the flexibility of custom 
                    map rendering for the scalability possible by serving of static data (base maps) where
                    the bounding box and scales have been constrained to discrete tiles which enables the 
                    use of standard network mechanisms for scalability such as distributed cache systems 
                    to cache images between the client and the server, reducing latency and bandwidth use.
                  </entry>
                </row>
                <row>
                  <entry>2:Distribution of geo feature (vector) data between applications</entry>
                  <entry>OGC 04-094, Web Feature Service (WFS) v.1.1.</entry>
                  <entry></entry>
                </row>
                <row>
                  <entry>4: Catalogue services support the ability to publish and search collections of 
                    descriptive information (metadata) for geospatial data, services, and related information 
                    objects.</entry>
                  <entry>OGC 07-006r1: Catalogue Service for the Web (CSW) v.2.0.2, SOAP message</entry>
                  <entry></entry>
                </row>
              </tbody>
            </tgroup>
            </table>
        </sect3>
    </sect2>
  </sect1>     
  <sect1>
    <title>COI Services and Data Standards</title>
      <para>Interoperability standards for COI services will have to be determined based on 
        commonly agreed Mission Threads.</para>
      <para>The following COI standards are part of the minimum set of interoperability
        requirements for capabilities on a Federated Mission Network.</para>
      <table frame="all">
        <title>General Data Format Standards</title>
        <tgroup cols="3">
          <colspec colwidth="20*" />
          <colspec colwidth="50*" />
          <colspec colwidth="30*" />
          <thead>
            <row>
              <entry>
                <emphasis role="bold">ID:Purpose</emphasis>
              </entry>
              <entry>
                <emphasis role="bold">Standard</emphasis>
              </entry>
              <entry>
                <emphasis role="bold">Guidance</emphasis>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>1:General definition for the Representation of Dates and Times.</entry>
              <entry>ISO 8601:2004 - Data elements and interchange formats - Information interchange - Representation of dates and times</entry>
              <entry>If not otherwise specified, implementation of the W3C profile of ISO 8601:2004 (W3CDTF profile) is mandatory.</entry>
            </row>
            <row>
              <entry>2:General definition of letter codes for Geographical Entities</entry>
              <entry>Country Codes (ISO 3166)</entry>
              <entry>Whenever possible, the ISO-3166 alpha-3 (three-letter codes) contained in STANAG 1059 should be used.</entry>
            </row>
            <row>
              <entry>4:General definition of geospatial coverage areas in discovery metadata</entry>
              <entry>World Geodetic System (WGS) 84, ISO 19115 and ISO 19136 (for point references)
              </entry>
              <entry>ISO 19139 provides encoding guidance for ISO 19115</entry>
            </row>
            <row>
              <entry>5:General definition of geospatial coverage areas in discovery metadata</entry>
              <entry>World Geodetic System (WGS) 84, ISO 19115 and ISO 19136 (for point 
                references)</entry>
              <entry>ISO 19139 provides encoding guidance for ISO 19115</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table frame="all">
        <title>Battlespace Management Interoperability Protocols and Standards</title>
        <tgroup cols="3">
          <colspec colwidth="20*" />
          <colspec colwidth="50*" />
          <colspec colwidth="30*" />
          <thead>
            <row>
              <entry>
                <emphasis role="bold">ID:Purpose</emphasis>
              </entry>
              <entry>
                <emphasis role="bold">Standard</emphasis>
              </entry>
              <entry>
                <emphasis role="bold">Guidance</emphasis>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>1:Expressing digital geographic annotation and visualization on, two-dimensional maps and three dimensional globes</entry>
              <entry>TIDE Transformational Baseline Vers. 3.0
                <para>NATO Vector Graphics (NVG 1.5)</para></entry>
              <entry>NVG shall be used as the standard Protocol and Data Format for encoding and sharing of information layers
                <para>NVG is a XML based language schema for expressing geographic annotations.</para> 
              </entry>
            </row>
            <row>
              <entry>5:Exchange of digital Friendly Force Information such as positional tracking 
                information amongst airborne and land-based tactical data systems and C2 systems.
              </entry>
              <entry>AC/322-D(2006)0066 Interim NFFI Standard for Interoperability of Force Tracking Systems
              </entry>
              <entry>All positional information of friendly ground forces (e.g. ground forces of Troop 
                Contributing Nations or commercial transport companies working in support of ISAF Forces) 
                shall be as a minimum made available in a format that can be translated into the NFFI V1.3 format.
              </entry>
            </row>
            <row>
              <entry>6:Military Symbology interoperability</entry>
              <entry>STANAG 2019, Ed.5:2008, Joint SmbologyAPP-6(B)
                <para>MIL-STD-2525B (w/Change 2), Common Warfighting Symbology, Mar 2007</para>
                <para>MIL-STD-2525C, Common Warfighting Symbology, Nov 2008</para>
                <para>Emerging: STANAG 2019, Ed.6:2011, Joint SmbologyAPP-6(C)</para>
                <para>MIL-STD-2525C, Common Warfighting Symbology, Nov 2008</para>
              </entry>
              <entry>Note that the different standards are not fully compatible with each other 
                and may require mapping services.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
  </sect1>    
  <sect1>
    <title>User Applications</title>      
    <para>User Applications, also known as application software, software applications, applications 
      or apps, are computer software components designed to help a user perform singular or multiple 
      related tasks and provide the logical interface between human and automated activities.</para>     
    <table frame="all">
      <title>User Applications Standards</title> 
      <tgroup cols="3">
        <colspec colwidth="20*" />
        <colspec colwidth="50*" />
        <colspec colwidth="30*" />
        <thead>
          <row>
            <entry>
              <emphasis role="bold">ID:Purpose</emphasis>
            </entry>
            <entry>
              <emphasis role="bold">Standard</emphasis>
            </entry>
            <entry>
              <emphasis role="bold">Guidance</emphasis>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>1:Displaying content within web browsers.</entry>
            <entry>W3C Hypertext Markup Language HTML 4.0.1
              <para>W3C Extensible Hypertext Markup Language XHTML 1.0</para>
              <para>W3C Cascading Style Sheets CSS 2.0</para></entry>
            <entry>Applications must support the following browsers: Microsoft 
              Internet Explorerv9.0 and newer, and Mozilla Firefox12.0 and newer.
              When a supported browser is not true to the standard, choose to support
              the browser.
              <para>Some organizations or end-user devices do not allow the use of 
                proprietary extensions such as Adobe Flash or Microsoft Silverlight.
                Those technologies shall be avoided. Implementers should use open 
                standard based solutions (HTML5 / CSS3) instead.</para></entry>
          </row>
          <row>
            <entry>2:Visualize common operational symbology within C4ISR systems 
              in order to convey information about objects in the battlespace.</entry>
            <entry>STANAG 2019, Ed.5:2008, Joint Symbology- APP-6(B)
              <para>U.S. MIL-STD 2525 B (w/Change 2), Common Warfighting Symbology, bMar 2007</para>
              <para>MIL-STD-2525C, Common Warfighting Symbology, Nov 2008</para>
              <para>Emerging: STANAG 2019, Ed.6:2011, Joint SmbologyAPP-6(C)</para>
              <para>TIDE Transformational Baseline Vers. 3-0, NATO Vector Graphics 
                (NVG 1.5)</para>
            </entry>
            <entry>All presentation service shall render tracks, tactical graphics,
              and MOOTW objects using this standard except in the case where the
              object being rendered is not covered in the standard. In these exceptional
              cases, additional symbols shall be defined as extensions of existing 
              symbols and must be backwards compatible. These extensions shall be
              submitted as a change proposal within the configuration control process
              to be considered for inclusion in the next version of the specification.
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </sect1>      
  <sect1>
    <title>Service Management and Control</title>      
    <para>Service Management and Control (SMC) provides a collection of capabilities to coherently 
      manage components in a federated service-enabled information technology infrastructure. SMC
      tools enable service providers to provide the desired quality of service as specified by the
      customer. In a federated environment such as a FMN instance, utilizing common process and 
      data is a critical enabler to manage a FMN.</para>     
    <table frame="all">
      <title>Service Management and Control Interoperability Standards</title> 
      <tgroup cols="3">
        <colspec colwidth="20*" />
        <colspec colwidth="50*" />
        <colspec colwidth="30*" />
        <thead>
          <row>
            <entry>
              <emphasis role="bold">ID:Purpose</emphasis>
            </entry>
            <entry>
              <emphasis role="bold">Standard</emphasis>
            </entry>
            <entry>
              <emphasis role="bold">Guidance</emphasis>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>3:Network management</entry>
            <entry>XSimple Network Management Protocol Version 3 (SNMPv3)</entry>
            <entry></entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </sect1>           
   <sect1>
     <title>References</title>
     <itemizedlist>
       <listitem>
         <para>[1] IT-AmtBw: “Service Registry “ Service Specification,</para>
         <para>100316_RuDi_IABG_AP2_ServiceRegistry_099.doc, 29.04.2010</para>
       </listitem>

      <listitem>
        <para>[2] IT-AmtBw: “Authorization Service” Service Specification,</para>
        <para>100415_RuDi_IABG_AP2_Authorization_099.doc, 18.05.2010</para>
      </listitem>

      <listitem>
        <para>[3] IT-AmtBw: “SoaPki Distribution Service” Swrvice Specification,</para>
        <para>100129_RuDi_IABG_AP2_SoaPki_Distribution-Service_001.doc</para>
      </listitem>

      <listitem>
        <para>[4] IT-AmtBw: “XKMS-Service” Service Specification,</para>
        <para>091127_RuDi_IABG_AP2_XKMS-Service_004.doc, 07.05.2010</para>
      </listitem>

      <listitem>
        <para>[5] IT-AmtBw: “GenKey-Service” Service Specification</para>
        <para>100315_RuDi_IABG_AP2_GenKey-Service_002.doc, 04.05.2010</para>
      </listitem>

      <listitem>
        <para>[6] IT-AmtBw: “Security Token Service” Service Specification,</para>
        <para>100506_RuDi_IABG_AP2_SecurityTokenService_199.doc, 10.05.2010</para>
      </listitem>

      <listitem>
        <para>[7] IT-AmtBw: “DomänenController” Service Specification,</para>
        <para>100429_RuDi_IABG_AP2_DomänenController_002.doc, 28.04.2010</para>
      </listitem>

      <listitem>
        <para>[8] IT-AmtBw: “Service Level Environment – High Level Concept”</para>
        <para>200910_RuDi_IABG_AP1_High-Level-Concept_400.doc, 20.09.2010</para>
      </listitem>

      <listitem>
        <para>[9] CoNSIS: “Synchronisation Service (SyncD)” Service Specification,</para>
        <para>CoNSIS/DEU/Task2/DL/0001, 27.05.2010</para>
      </listitem>
      
      <listitem>
        <para>[10] IT-AmtBw: “Notification Management Service (NMR)” Service Specification,</para>
        <para>100321_RuDi_IABG_AP3_Notification-Management-Service_001.doc, 20.09.2010</para>
      </listitem>
    </itemizedlist>
  </sect1>

</appendix>
